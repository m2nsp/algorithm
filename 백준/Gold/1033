N = int(input())                                                        # N : 재료의 개수

A = [[] for _ in range(N)]                                              # 재료들 간의 비율 정보를 저장할 리스트, 연결된 재료와 그 비율을 튜플 형태로 저장.

visited = [False] * N                                                   # 방문 여부
D = [0] * N                                                             # 각 재료의 절대적인 양을 저장
lcm = 1                                                                 # 재료들의 전체 비율을 나타낼 최소공배수

def gcd(a, b):                                                          # 최대공약수를 계산하는 함수
    if b == 0:
        return a  # a가 GCD가 됨
    else:
        return gcd(b, a % b)  

def dfs(v):                                                             # DFS를 사용해 각 재료의 양을 계산하는 함수
    visited[v] = True  
    for i in A[v]: 
        next = i[0]  
        if not visited[next]:  
            D[next] = D[v] * i[2] // i[1]
            dfs(next) 

for i in range(N - 1):                                                  # 모든 재료들 간의 관계를 입력받아 리스트 A에 저장하고 LCM을 계산
    a, b, p, q = map(int, input().split())                              # 재료 a와 b의 비율 p:q를 입력받음
    A[a].append((b, p, q))                                              # a에서 b로 가는 비율을 저장
    A[b].append((a, q, p))                                              # b에서 a로 가는 비율을 저장 (반대 방향)
    lcm *= (p * q // gcd(p, q))                                         # 현재까지의 최소공배수 계산

D[0] = lcm
dfs(0)                                                                  # 첫 번째 재료를 기준으로 DFS를 시작하여 모든 재료의 절대적 양을 계산

mgcd = D[0]                                            
for i in range(1, N):                                                   # 모든 재료의 양에 대해 GCD를 계산
    mgcd = gcd(mgcd, D[i])

for i in range(N):
    print(int(D[i] // mgcd), end=' ')
